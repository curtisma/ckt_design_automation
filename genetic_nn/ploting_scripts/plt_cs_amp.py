"""
This file contains functions for ploting data from log files generated by design comparison based approaches:
design_comparison.py is an example for cs_amp from a pre simulated look up table


"""
import matplotlib.pyplot as plt
import numpy as np
import pickle
import matplotlib.colors


def plot_each_retraining_stage(fname, xname='x_vec', yname='y_vec'):
    with open(fname, 'rb') as f:
        read_data = pickle.load(f)

    assert {'cost_mat', 'x_vec', 'y_vec'}.issubset(read_data.keys())
    assert {'data_set_list', 'cost_set_list'}.issubset(read_data.keys())

    cost_mat = read_data['cost_mat']
    y_vec = read_data['y_vec']
    x_vec = read_data['x_vec']
    data_set_list = read_data['data_set_list']
    cost_set_list = read_data['cost_set_list']

    cost_min = np.min(np.min(cost_mat))
    cost_max = np.max(np.max(cost_mat))

    fig = plt.figure()
    for i in range(min(len(cost_set_list), 10)):
        ax = fig.add_subplot(2, 5, i+1)
        mappable = ax.pcolormesh(cost_mat, cmap='Greys', vmin=cost_min, vmax=cost_max)
        plt.colorbar(mappable)
        if i>=5:
            ax.set_xlabel(xname)
        if i%5==0:
            ax.set_ylabel(yname)

        x = [sample[0] for sample in data_set_list[i]]
        y = [sample[1] for sample in data_set_list[i]]
        ax.scatter(x, y, marker='x', color='r')
        # ax.axis([0, 250, 0, 100])

def print_best_sample(fname):
    with open(fname, 'rb') as f:
        read_data = pickle.load(f)

    assert {'cost_mat', 'x_vec', 'y_vec'}.issubset(read_data.keys())
    assert {'data_set_list', 'cost_set_list'}.issubset(read_data.keys())


    data_set_list = read_data['data_set_list']
    cost_set_list = read_data['cost_set_list']

    for i in range(len(cost_set_list)):
        print("[Info] @step %d: best_sample's cost -> %f" %(i, cost_set_list[i][0]))

def main():
    plot_each_retraining_stage('genetic_nn/log_files/cs_logbook.pickle', xname='res', yname='mul')
    print_best_sample('genetic_nn/log_files/cs_logbook.pickle')
    plt.show()

if __name__ == '__main__':
    main()